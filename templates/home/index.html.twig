{% extends 'base.html.twig' %}

{% block body %}

<style>
	.btn-gradient {
		padding: 12px 25px;
		font-size: 16px;
		color: #fff;
		border: none;
		border-radius: 5px;
		background: linear-gradient(90deg, #ff7e5f, #ff3f81);
		transition: background 0.3s, box-shadow 0.3s, transform 0.3s;
		cursor: pointer;
		position: relative;
		z-index: 2;
	}

	.btn-gradient:hover {
		background: linear-gradient(90deg, #ff3f81, #ff7e5f);
		transform: translateY(-5px) scale(1.05);
	}

	@media(max-width: 768px) {
		#stepImage {
			max-height: 80vh !important;
			width: auto !important;
		}

	}

	.fade-out {
		opacity: 0;
		transition: opacity 0.3s ease;
	}


	.step-icons {
		display: flex;
		align-items: center;
		gap: 10px;
	}

	.step-circle {
		width: 40px;
		height: 40px;
		border-radius: 50%;
		background-color: #ddd;
		display: flex;
		align-items: center;
		justify-content: center;
		font-size: 20px;
		color: #777;
		transition: background 0.3s, color 0.3s;
	}

	.step-circle.active {
		background-color: #28a745;
		color: white;
	}

	.step-line {
		width: 50px;
		height: 5px;
		background-color: #ddd;
		transition: background 0.3s;
	}

	.loader {
		border: 5px solid #f3f3f3;
		border-top: 5px solid #3498db;
		border-radius: 50%;
		width: 50px;
		height: 50px;
		animation: spin 1s linear infinite;
		margin: 20px auto;
	}

	@keyframes spin {
		0% {
			transform: rotate(0deg);
		}

		100% {
			transform: rotate(360deg);
		}
	}

	.edit-icon,
	.delete-icon {
		color: #6c757d;
		text-decoration: none;
		transition: transform 0.3s ease, color 0.3s ease, filter 0.3s ease;
	}

	.edit-icon:hover,
	.delete-icon:hover {
		transform: scale(1.1) translateY(-2px);
		color: #495057;
		filter: brightness(1.2);
	}

	.card-footer a {
		cursor: pointer;
		transition: transform 0.3s ease, color 0.3s ease;
	}

	.card-footer a:hover {
		transform: scale(1.1);
		color: #0056b3;
	}

	.btn-toggle-more {
		background-color: #f8f9fa;
		border: none;
		padding: 0.6rem 1.2rem;
		border-radius: 30px;
		box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
		color: #333;
		font-weight: 500;
		cursor: pointer;
		transition: all 0.3s ease;
	}

	.btn-toggle-more:hover {
		background-color: #e9ecef;
	}

	.transition {
		transition: transform 0.3s ease;
	}

	.icon-gradient {
		background: linear-gradient(90deg, #ec008c, #f6941f);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		display: inline-block;
	}
</style>

<style>
@import url('https://fonts.cdnfonts.com/css/montserrat');

.intervention-notice {
	position: fixed;
	top: 0;
	left: 0;
	width: 100vw;
	height: 100vh;
	background: rgba(255, 255, 255, 0.95);
	display: flex;
	align-items: center;
	justify-content: center;
	z-index: 9999;
	padding: 1rem;
}

.intervention-card {
	max-width: 900px;
	width: 100%;
	background: #fff;
	border-radius: 16px;
	box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15);
	padding: 2.5rem;
	text-align: center;
	font-family: ;
}

.intervention-title {
	color: #333;
	margin-bottom: 2rem;
}

.intervention-text-wrapper p {
	font-size: 1rem;
	color: #555;
	margin-bottom: 1.2rem;
	line-height: 1.6;
	font-family: 'montserrat';
}

.btn-gradient {
	background: linear-gradient(90deg, #ff7e5f, #ff3f81);
	color: #fff;
	padding: 0.75rem 1.5rem;
	border-radius: 30px;
	text-decoration: none;
	font-weight: 600;
	transition: background 0.3s ease, transform 0.3s ease;
}

.btn-gradient:hover {
	background: linear-gradient(90deg, #ff3f81, #ff7e5f);
	transform: translateY(-2px);
	color: #fff;
}

.intervention-title b {
	font-weight: 600 !important;
}

</style>

<div class="container">
	<h1 class="text-center mb-4 text-dark">Supervision des Bornes</h1>
	<hr class="mx-auto mb-4" style="width: 80%; border: 2px solid #ddd;">

	<div class="d-flex flex-column flex-md-row justify-content-between align-items-center px-2 mb-4">
		<span class="fw-bold text-dark fs-5 mb-3 mb-md-0">Prochaine intervention</span>

			<a href="javascript:void(0)" id="newInterventionBtn"
			style="padding: 12px 25px; font-size: 16px; color: #fff; border: none; border-radius: 5px; background: linear-gradient(90deg, #ff7e5f, #ff3f81); transition: background 0.3s, box-shadow 0.3s, transform 0.3s; cursor: pointer; position: relative; z-index: 2; text-decoration: none;"
			onmouseover="this.style.background='linear-gradient(90deg, #ff3f81, #ff7e5f)'; this.style.transform='translateY(-5px) scale(1.05)';"
			onmouseout="this.style.background='linear-gradient(90deg, #ff7e5f, #ff3f81)'; this.style.transform='translateY(0) scale(1)';">
				<i class="bi bi-person-plus"></i>
				Nouvelle installation
			</a>

	</div>
</div>

<div class="container">
	<div class="client-container">
		{% for client in clientsData %}
		<div class="client-card mb-5 p-4 bg-white rounded shadow text-center text-md-start">
			<div
				class="d-flex flex-column flex-md-row align-items-center justify-content-between border-bottom pb-3 mb-3">
				<h4 class="mb-2 mb-md-0">
					<i class="bi bi-building icon-gradient me-2" style="font-size: 1.2rem;"></i>{{ client.societyName }}
				</h4>
				<p class="mb-0">
					<i class="bi bi-envelope text-secondary me-2" style="font-size: 1.2rem;"></i>
					<strong>{{ client.email }}</strong>
				</p>
			</div>
			<div class="borne-section" data-client-id="{{ loop.index }}">
				<div class="borne-container d-grid"
					style="grid-template-columns: repeat(auto-fill, minmax(280px, 1fr)); gap: 1.5rem;">
					{% for station in client.stations %}
					<div class="borne-card card shadow-sm border-0"
						style="transition: transform 0.3s ease; overflow: hidden;" {% if loop.index> 4 %} hidden {%
						endif %}>

						<div class="position-relative bg-light d-flex align-items-center justify-content-center"
							style="height: 220px;">
							<img src="{{ asset('uploads/' ~ station.station.image) }}" alt="Image de la Borne"
								class="img-fluid p-3" style="max-height: 100%; object-fit: contain;">

							<span class="badge bg-primary position-absolute top-0 start-0 m-2">
								<i class="bi bi-cpu me-1"></i> {{ station.station.model }}
							</span>
						</div>

						<div class="card-body text-center">
							<h5 class="card-title text-dark mb-2">{{ station.borneName }}</h5>

							<div class="d-flex flex-column align-items-start gap-2 text-muted" style="font-size: 14px;">
								<div>
									<i class="bi bi-plug me-2 text-primary"></i>
									Connecteurs: <strong>{{ station.station.connectors }}</strong>
								</div>
								<div>
									{% if station.station.reference %}
									Ref :{{station.station.reference}}
									{% endif %}
								</div>
								<div>
									<i class="bi bi-building me-2 text-secondary"></i>
									Fabricant: <strong>{{ station.station.manufacturer.name }}</strong>
								</div>
								<div>
									<i class="bi bi-calendar me-2 text-info"></i>
									Ajoutée: {{ station.station.createdAt|date('d/m/Y') }}
								</div>
							</div>

							<hr>

							<a href="#" class="btn btn-outline-success w-100 mt-2 start-supervision-btn"
								data-bs-toggle="modal" data-bs-target="#stepByStepModal"
								data-id="{{ station.station.id }}" data-model="{{ station.station.model }}"
								data-bornename="{{ station.borneName }}">
								<i class="bi bi-play-circle me-1"></i>Démarrer supervision
							</a>
						</div>
						
					</div>
					{% else %}
					<p class="text-muted">Aucune borne pour ce client.</p>
					{% endfor %}
				</div>

				{% if client.stations|length > 4 %}
				<div class="text-center mt-4">
					<button class="btn-toggle-more">
						<span class="btn-text">Afficher plus</span>
						<i class="bi bi-chevron-down ms-1 transition btn-icon"></i>
					</button>
				</div>
				{% endif %}
			</div>
		</div>
		{% else %}
		<p class="text-center text-muted">Aucun client trouvé.</p>
		{% endfor %}
	</div>
</div>

<div class="modal fade" id="stepByStepModal" tabindex="-1" aria-labelledby="stepByStepModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-lg modal-fullscreen-md-down">
		<div class="modal-content">

			<div class="modal-header" style="background: linear-gradient(90deg, #ff7e5f, #ff3f81); color: white;">
				<h5 class="modal-title" id="stepByStepModalLabel">
					Mise en supervision
				</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer"></button>
			</div>

			<div class="modal-body text-center">
				<div class="step-indicator mb-2">
					<strong>Étape
						<span id="currentStepDoc">X</span>
						/
						<span id="totalStepsDoc">X</span>
					</strong>
				</div>

				<div class="progress mb-3" style="height: 5px;">
					<div id="stepProgressBar" class="progress-bar bg-success"
						style="width: 0%; transition: width 0.3s;"></div>
				</div>

				<div id="loadingStepDocs" class="text-center my-4 d-none">
					<p class="text-muted mb-3">Chargement des étapes de supervision...</p>
					<div class="loader"></div>
				</div>

				<div class="image-container text-center position-relative">
					<img id="stepImage" src="" alt="Documentation Image" class="img-fluid"
						style="max-width: 100%; max-height: 500px; object-fit: contain; border-radius: 10px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); cursor: pointer;">
				</div>

				<div id="stepContentText" class="mt-3 text-center text-muted"></div>

				<div class="form-step" id="customStepSupervision">
					<div id="notificationContainer" class="position-fixed top-0 end-0 p-3" style="z-index: 1050;"></div>

					<h3>Finalisation de la supervision</h3>

					<p class="text-muted">
						Nom de la borne supervisée :
						<strong id="displayBorneName" class="text-dark">—</strong>
					</p>

					<button id="startSupervision" class="btn btn-primary">
						<i class="bi bi-play-circle"></i>
						Démarrer les tests
					</button>

					<div class="step-icons d-flex justify-content-center mb-4 d-none">
						<div class="step-circle" id="stepIcon1">
							<i class="bi bi-plug"></i>
						</div>
						<div class="step-line"></div>
						<div class="step-circle" id="stepIcon2">
							<i class="bi bi-clipboard-check"></i>
						</div>
						<div class="step-line"></div>
						<div class="step-circle" id="stepIcon3">
							<i class="bi bi-check-circle"></i>
						</div>
					</div>

					<div id="stepContent" class="d-none">
						<p>Connexion à la borne...</p>
						<div class="loader"></div>
					</div>

					<div id="finalStepContent" class="d-none">
						<p>Supervision terminée avec succès !</p>
					</div>
				</div>

				<div class="d-flex justify-content-between mt-3">
					<button class="btn btn-secondary prev-step rounded-3 rounded-pill">
						<i class="bi bi-arrow-left"></i>
						Précédent
					</button>
					<button class="btn btn-primary next-step rounded-3 rounded-pill">
						Suivant
						<i class="bi bi-arrow-right"></i>
					</button>
				</div>
			</div>
		</div>
	</div>
</div>

<div id="interventionNotice" class="intervention-notice d-none">
	<div class="intervention-card">
		<p class="intervention-title">
			Avant de commencer, assurez-vous d'avoir <b> l'e-mail et le nom </b>  de l'entreprise de votre client
		</p>

		<div class="intervention-text-wrapper">
			<p class="intervention-text">Munissez-vous de votre <b> Kit de supervision </b></p>
			<p class="intervention-text">Choisissez le modèle de borne de recharge, attention à bien vérifier la <b>référence fabricant du modèle.</b> </p>
		</div>

		<a href="{{ path('dashboard_add_client') }}" class="btn-gradient mt-4 d-inline-block">J'ai compris</a>
	</div>
</div>

<script>
	document.addEventListener("DOMContentLoaded", function () {
		const hasStations = {{ clientsData|filter(client => client.stations is defined and client.stations|length > 0)|length > 0 ? 'true' : 'false' }};

		if (!hasStations) {
			const modal = new bootstrap.Modal(document.getElementById('noInterventionModal'));
			modal.show();
		}
	});
</script>

<script>
	document.addEventListener("DOMContentLoaded", function () {
		const stepModal = document.getElementById('stepByStepModal');
		const progressBarStep = document.getElementById('stepProgressBar');
		const stepImageStep = document.getElementById('stepImage');
		const stepIndicatorStep = document.getElementById("currentStepDoc");
		const totalStepsStep = document.getElementById("totalStepsDoc");
		const customStep = document.getElementById("customStepSupervision");
		const stepInfo = document.getElementById("stepContentText");
		const prevBtn = document.querySelector('.prev-step');
		const nextBtn = document.querySelector('.next-step');

		let steps = [];
		let currentStep = 0;
		let totalSteps = 0;

		document.querySelectorAll(".start-supervision-btn").forEach(button => {
			button.addEventListener("click", async function () {
				const stationId = this.dataset.id;
				const borneName = this.dataset.bornename;

				document.getElementById("displayBorneName").textContent = borneName ?? "—";

				document.getElementById("loadingStepDocs").classList.remove("d-none");
				stepImageStep.classList.add("d-none");
				customStep.classList.add("d-none");
				stepInfo.innerHTML = "";
				prevBtn.disabled = true;
				nextBtn.disabled = true;

				try {
					const res = await fetch(`/charging/stations/${stationId}/docs`);
					if (!res.ok) throw new Error("Erreur de chargement des documentations");

					steps = await res.json();
					steps.sort((a, b) => (a.step ?? 0) - (b.step ?? 0));

					document.getElementById("loadingStepDocs").classList.add("d-none");
					prevBtn.disabled = false;
					nextBtn.disabled = false;

					totalSteps = steps.length + 1;
					currentStep = 0;

					totalStepsStep.textContent = totalSteps;
					showStep(currentStep);
				} catch (error) {
					console.error("Erreur récupération steps :", error);
					steps = [];
					totalSteps = 1;
					currentStep = 0;
					totalStepsStep.textContent = totalSteps;
					showStep(currentStep);
				}
			});
		});

		function showStep(index) {
			stepImageStep.classList.add("d-none");
			customStep.classList.add("d-none");
			stepInfo.innerHTML = "";

			if (index < steps.length) {
				const step = steps[index];
				stepImageStep.src = step.image;
				stepImageStep.classList.remove("d-none");

				if (step.ocpp || step.napn) {
					stepInfo.innerHTML = `
			<div class="text-center mt-3">
				${step.ocpp ? `
					<div class="d-flex justify-content-center align-items-center mb-3">
						<span class="me-2"><strong>OCPPs :</strong> ${step.ocpp}</span>
						<button class="btn btn-outline-secondary btn-sm copy-btn" data-copy="${step.ocpp}" title="Copiar OCPP">
							<i class="bi bi-clipboard"></i>
						</button>
					</div>` : ""
						}
				${step.napn ? `
					<div class="d-flex justify-content-center align-items-center">
						<span class="me-2"><strong>NAPN :</strong> ${step.napn}</span>
						<button class="btn btn-outline-secondary btn-sm copy-btn" data-copy="${step.napn}" title="Copiar NAPN">
							<i class="bi bi-clipboard"></i>
						</button>
					</div>` : ""
						}
			</div>
		`;

					const copyButtons = stepInfo.querySelectorAll(".copy-btn");
					copyButtons.forEach(btn => {
						btn.addEventListener("click", () => {
							const textToCopy = btn.getAttribute("data-copy");
							navigator.clipboard.writeText(textToCopy).then(() => {
								btn.innerHTML = '<i class="bi bi-clipboard-check"></i>';
								setTimeout(() => {
									btn.innerHTML = '<i class="bi bi-clipboard"></i>';
								}, 1500);
							});
						});
					});
				}
			} else {
				customStep.classList.remove("d-none");
			}


			const progressPercentage = (index / (totalSteps - 1)) * 100;
			progressBarStep.style.width = `${progressPercentage}%`;
			prevBtn.classList.toggle("d-none", index === 0);
			nextBtn.classList.toggle("d-none", index === totalSteps - 1);
			stepIndicatorStep.textContent = index + 1;
		}

		stepModal.addEventListener('show.bs.modal', function () {
			showStep(currentStep);
		});

		nextBtn.addEventListener('click', function () {
			if (currentStep < totalSteps - 1) {
				currentStep++;
				showStep(currentStep);
			}
		});

		prevBtn.addEventListener('click', function () {
			if (currentStep > 0) {
				currentStep--;
				showStep(currentStep);
			}
		});
	});
</script>

<script>
	document.addEventListener("DOMContentLoaded", function () {
		const sections = document.querySelectorAll('.borne-section');

		sections.forEach(section => {
			const cards = section.querySelectorAll('.borne-card');
			const btn = section.querySelector('.btn-toggle-more');
			const btnText = section.querySelector('.btn-text');
			const btnIcon = section.querySelector('.btn-icon');

			const batchSize = 4;
			let visibleCount = batchSize;

			function updateView() {
				cards.forEach((card, index) => {
					card.hidden = index >= visibleCount;
				});

				if (visibleCount >= cards.length) {
					btnText.textContent = 'Afficher moins';
					btnIcon.classList.remove('bi-chevron-down');
					btnIcon.classList.add('bi-chevron-up');
					btnIcon.style.transform = 'rotate(180deg)';
				} else {
					btnText.textContent = 'Afficher plus';
					btnIcon.classList.remove('bi-chevron-up');
					btnIcon.classList.add('bi-chevron-down');
					btnIcon.style.transform = 'rotate(0deg)';
				}
			}

			if (btn) {
				btn.addEventListener('click', () => {
					if (visibleCount >= cards.length) {
						visibleCount = batchSize; // reset
					} else {
						visibleCount = Math.min(visibleCount + batchSize, cards.length);
					}
					updateView();
				});

				updateView(); // initial
			}
		});
	});
	document.addEventListener("DOMContentLoaded", function () {
		let currentStep = 1;
		const totalSteps = 2;

		const stepIndicatorForm = document.getElementById("currentStepForm");
		const totalStepsFormElem = document.getElementById("totalStepsForm");

		if (!stepIndicatorForm) {
			console.error("stepIndicatorForm est introuvables.");
			return;
		}

		if (!totalStepsFormElem) {
			console.error("totalStepsFormElem est introuvables.");
			return;
		}

		totalStepsFormElem.textContent = totalSteps;

		function updateStep() {
			document.querySelectorAll(".form-step").forEach(step => step.classList.add("d-none"));
			let currentStepElement = document.getElementById("step" + currentStep);
			if (currentStepElement) {
				currentStepElement.classList.remove("d-none");
			}

			let progressPercentage = ((currentStep - 1) / (totalSteps - 1)) * 100;
			let progressStep1 = document.getElementById("progressStep1");
			let progressStep2 = document.getElementById("progressStep2");

			if (progressStep1 && progressStep2) {
				progressStep1.style.width = `${progressPercentage}%`;
				progressStep2.style.width = `${100 - progressPercentage}%`;

				progressStep1.classList.toggle("bg-success", currentStep >= 1);
				progressStep2.classList.toggle("bg-success", currentStep === 2);
			}

			let modalTitle = document.getElementById("modalTitle");
			if (modalTitle) {
				modalTitle.textContent = currentStep === 1 ? "Information du client" : "Information de l'installation";
			}

			let prevBtn = document.getElementById("prevBtn");
			let nextBtn = document.getElementById("nextBtn");
			let submitBtn = document.getElementById("submitBtn");

			if (prevBtn && nextBtn && submitBtn) {
				prevBtn.classList.toggle("d-none", currentStep === 1);
				nextBtn.classList.toggle("d-none", currentStep === totalSteps);
				submitBtn.classList.toggle("d-none", currentStep !== totalSteps);
			}

			stepIndicatorForm.textContent = currentStep;
		}

		let nextBtn = document.getElementById("nextBtn");
		let prevBtn = document.getElementById("prevBtn");
		let submitBtn = document.getElementById("submitBtn");

		if (nextBtn) {
			nextBtn.addEventListener("click", () => {
				if (currentStep < totalSteps) {
					currentStep++;
					updateStep();
				}
			});
		}

		if (prevBtn) {
			prevBtn.addEventListener("click", () => {
				if (currentStep > 1) {
					currentStep--;
					updateStep();
				}
			});
		}

		if (submitBtn) {
			submitBtn.addEventListener("click", function (event) {
				event.preventDefault();
				let form = document.getElementById("multiStepForm");
				if (!form) return;
				submitBtn.disabled = true;
				form.submit();
			});
		}

		let form = document.getElementById("multiStepForm");
		if (form) {
			form.addEventListener("submit", function (event) {
				event.preventDefault();
				setTimeout(() => {
					this.submit();
				}, 1000);
			});
		}
	});
</script>

<script>
	document.addEventListener("DOMContentLoaded", function () {
		const startButton = document.getElementById("startSupervision");
		const stepContent = document.getElementById("stepContent");
		const finalStepContent = document.getElementById("finalStepContent");
		const stepIconsContainer = document.querySelector(".step-icons");
		const stepIcons = [
			document.getElementById("stepIcon1"),
			document.getElementById("stepIcon2"),
			document.getElementById("stepIcon3")
		];
		const stepLines = document.querySelectorAll(".step-line");
		const modal = document.getElementById("stepByStepModal");
		const notificationContainer = document.getElementById("notificationContainer");

		const stepsText = [
			"Connexion à la borne...",
			"Vérification des informations...",
			"Finalisation de la supervision..."
		];

		let selectedBorneName = null;

		document.querySelectorAll(".start-supervision-btn").forEach(button => {
			button.addEventListener("click", function () {
				selectedBorneName = this.dataset.bornename || null;
				console.log("Nom de la borne reçu :", selectedBorneName);

				const displayElement = document.getElementById("displayBorneName");
				if (displayElement) {
					displayElement.textContent = selectedBorneName ?? "—";
				}
			});
		});

		async function startSupervisionProcess() {
			const stationName = selectedBorneName;
			console.log("Supervision de :", stationName);

			if (!stationName) {
				showNotification("Nom de la borne introuvable.", "warning");
				return;
			}

			try {
				stepIconsContainer.classList.remove("d-none");
				stepContent.classList.remove("d-none");
				finalStepContent.classList.add("d-none");

				updateStep(0, "Connexion à la borne...");
				const token = await authenticateUser();
				if (!token) throw new Error("Échec de l'authentification");

				updateStep(1, "Vérification des informations...");
				const isBorneValid = await checkChargingStation(token, stationName);
				if (!isBorneValid) throw new Error("Borne introuvable");

				updateStep(2, "Finalisation...");
				const isDisabled = await disableChargingStation(token, stationName);
				if (!isDisabled) throw new Error("Échec de la supervision");

				stepContent.classList.add("d-none");
				finalStepContent.classList.remove("d-none");
				showNotification("Borne supervisée avec succès !", "success");

			} catch (error) {
				console.error("Erreur:", error);
				startButton.classList.remove("d-none");
				showNotification(error.message, "danger");
			}
		}

		function updateStep(stepIndex, message) {
			stepIcons[stepIndex].classList.add("active");
			if (stepIndex > 0) {
				stepLines[stepIndex - 1].style.backgroundColor = "#28a745";
			}
			stepContent.innerHTML = `<p>${message}</p><div class="loader"></div>`;
		}

		function showNotification(message, type) {
			const notification = document.createElement("div");
			notification.className = `alert alert-${type} alert-dismissible fade show`;
			notification.role = "alert";
			notification.innerHTML = `
				${message}
				<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
			`;

			notificationContainer.appendChild(notification);

			setTimeout(() => {
				notification.classList.remove("show");
				setTimeout(() => notification.remove(), 500);
			}, 5000);
		}

		async function authenticateUser() {
			const response = await fetch("https://lodmi.charge-angels.com/v1/auth/signin", {
				method: "POST",
				headers: { "Content-Type": "application/json" },
				body: JSON.stringify({
					email: "partenaire@partenaire.com",
					password: "aDTQE83e2XkBaxTU@@",
					acceptEula: true,
					acceptPrivacy: true,
					tenant: "lodmi"
				})
			});

			if (!response.ok) {
				console.error("Erreur d'authentification:", response.status);
				return null;
			}

			const data = await response.json();
			return data.token;
		}

		async function checkChargingStation(token, stationName) {
			updateStep(1, "Vérification des informations...");

			const response = await fetch(`https://lodmi.charge-angels.com/v1/api/charging-stations/${stationName}`, {
				method: "GET",
				headers: { "Authorization": `Bearer ${token}` }
			});

			if (!response.ok) {
				updateStep(1, "Un problème est survenu");
				showNotification("Merci de vérifier que la borne est bien connectée à Internet.", "warning");
				throw new Error("Borne déconnectée");
			}

			const data = await response.json();

			if (data.inactive === true) {
				updateStep(1, "Un problème est survenu");
				showNotification("Merci de vérifier que la borne est bien connectée à Internet.", "warning");
				throw new Error("Borne déconnectée");
			}

			return true;
		}

		async function disableChargingStation(token, stationName) {
			const response = await fetch(`https://lodmi.charge-angels.com/v1/api/charging-stations/${stationName}/availability/change`, {
				method: "PUT",
				headers: {
					"Authorization": `Bearer ${token}`,
					"Content-Type": "application/json"
				},
				body: JSON.stringify({
					"status": "accepted",
					"args": {
						"connectorId": 0,
						"type": "Inoperative"
					}
				})
			});

			return response.ok;
		}

		startButton.addEventListener("click", function () {
			startButton.classList.add("d-none"); // on masque le bouton
			startSupervisionProcess(); // on lance le process
		});

		modal.addEventListener("hidden.bs.modal", resetProcess);

		function resetProcess() {
			stepIcons.forEach(icon => icon.classList.remove("active"));
			stepLines.forEach(line => line.style.backgroundColor = "#ddd");
			stepIconsContainer.classList.add("d-none");
			startButton.classList.remove("d-none");
			stepContent.classList.add("d-none");
			finalStepContent.classList.add("d-none");
			selectedBorneName = null;
			document.getElementById("displayBorneName").textContent = "—";
		}
	});

</script>

<script>
	document.addEventListener("DOMContentLoaded", function () {
		const addButton = document.getElementById('addIntervention');
		const container = document.getElementById('interventionContainer');

		if (!addButton || !container) {
			console.error("addButton ou container manquant.");
			return;
		}

		let index = 0;

		addButton.addEventListener('click', function () {
			const prototype = container.dataset.prototype;
			if (!prototype) {
				console.error("Prototype manquant dans data-prototype.");
				return;
			}

			const newForm = prototype.replace(/__name__/g, index);
			const newDiv = document.createElement('div');
			newDiv.innerHTML = newForm;
			container.appendChild(newDiv);

			index++;
		});

		// (optionnel) supprimer une borne si un bouton trash est cliqué
		container.addEventListener('click', function (e) {
			if (e.target.closest('.remove-intervention')) {
				e.preventDefault();
				const item = e.target.closest('.intervention-item');
				if (item) {
					item.remove();
				}
			}
		});
	});
</script>

<script>
	document.addEventListener('DOMContentLoaded', function () {
		const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
		tooltipTriggerList.map(function (tooltipTriggerEl) {
			return new bootstrap.Tooltip(tooltipTriggerEl)
		})
	})
</script>

<script>

	document.addEventListener("DOMContentLoaded", function () {
		if (!modal) return;

		modal.addEventListener("shown.bs.modal", function () {
			const tooltipTrigger = document.getElementById("info-icon-unique");

			if (!tooltipTrigger || tooltipTrigger.dataset.bound === "true") return;

			const imageUrl = tooltipTrigger.dataset.tooltipImage;

			new bootstrap.Tooltip(tooltipTrigger, {
				html: true,
				title: `<img src="${imageUrl}" style="max-width:200px; height:auto;" alt="QR Code exemple">`,
				container: 'body' // important dans une modal
			});

			tooltipTrigger.dataset.bound = "true";
		});
	});

</script>

<script>
	document.addEventListener("DOMContentLoaded", function () {

		const triggerBtn = document.getElementById("newInterventionBtn");
if (triggerBtn) {
	triggerBtn.addEventListener("click", () => {
		showInterventionNotice();
	});
}


		const notice = document.getElementById("interventionNotice");
		const closeBtn = document.getElementById("interventionCloseBtn");

		window.showInterventionNotice = () => {
			notice.classList.remove("d-none");
		};

		closeBtn.addEventListener("click", () => {
			notice.classList.add("d-none");
		});
	});
</script>

{% endblock %}