{% extends 'base.html.twig' %}


{% block body %}

	<style>
		.btn-gradient {
			padding: 12px 25px;
			font-size: 16px;
			color: #fff;
			border: none;
			border-radius: 5px;
			background: linear-gradient(90deg, #ff7e5f, #ff3f81);
			transition: background 0.3s, box-shadow 0.3s, transform 0.3s;
			cursor: pointer;
			position: relative;
			z-index: 2;
		}

		.btn-gradient:hover {
			background: linear-gradient(90deg, #ff3f81, #ff7e5f);
			transform: translateY(-5px) scale(1.05);
		}

		@media(max-width: 768px) {
			#stepImage {
				max-height: 80vh !important;
				width: auto !important;
			}

		}

.step-icons {
    display: flex;
    align-items: center;
    gap: 10px;
}

.step-circle {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background-color: #ddd;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 20px;
    color: #777;
    transition: background 0.3s, color 0.3s;
}

.step-circle.active {
    background-color: #28a745;
    color: white;
}

.step-line {
    width: 50px;
    height: 5px;
    background-color: #ddd;
    transition: background 0.3s;
}

.loader {
    border: 5px solid #f3f3f3;
    border-top: 5px solid #3498db;
    border-radius: 50%;
    width: 50px;
    height: 50px;
    animation: spin 1s linear infinite;
    margin: 20px auto;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

	</style>
	<div class="container">
		<h1 class="text-center mb-4 text-dark">Supervision des Bornes</h1>
		<hr class="mx-auto mb-4" style="width: 80%; border: 2px solid #ddd;">

		<div class="d-flex flex-column flex-md-row justify-content-between align-items-center px-2 mb-4">
			<span class="fw-bold text-dark fs-5 mb-3 mb-md-0">Prochaine intervention</span>

			<button type="button" data-bs-toggle="modal" data-bs-target="#progressModal" style="padding: 12px 25px; font-size: 16px; color: #fff; border: none; border-radius: 5px; background: linear-gradient(90deg, #ff7e5f, #ff3f81); transition: background 0.3s, box-shadow 0.3s, transform 0.3s; cursor: pointer; position: relative; z-index: 2;" onmouseover="this.style.background='linear-gradient(90deg, #ff3f81, #ff7e5f)'; this.style.transform='translateY(-5px) scale(1.05)';" onmouseout="this.style.background='linear-gradient(90deg, #ff7e5f, #ff3f81)'; this.style.transform='translateY(0) scale(1)';">
				<i class="bi bi-person-plus"></i>
				Ajouter un client
			</button>
		</div>
	</div>

	<div class="client-container">
		{% for client in clientsData %}
			<div class="client-card" style="margin-bottom: 20px; padding: 15px; background: #f9f9f9; border-radius: 8px; box-shadow: 0 2px 6px rgba(0,0,0,0.1);">
				<h2 style="color: #333;">{{ client.societyName }}</h2>
				<p>Email:
					<strong>{{ client.email }}</strong>
				</p>

				<div class="borne-container" style="display: flex; flex-wrap: wrap; gap: 20px; justify-content: center;">
					{% for station in client.stations %}
						<div class="borne-card" style="position: relative; width: 250px; background: #fff; border-radius: 10px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); transition: transform 0.3s, box-shadow 0.3s; cursor: pointer; overflow: hidden;">
							<span style="position: absolute; top: 10px; right: 10px; font-size: 0.75rem; background: #eee; color: #333; padding: 2px 6px; border-radius: 5px; z-index: 2;">{{
                            station.model }}</span>
							<div style="width: 100%; height: 150px; display: flex; justify-content: center; align-items: center; background-color: #f8f8f8; overflow: hidden;">
								<img src="{{ asset('uploads/' ~ station.image) }}" alt="Image de la Borne" style="max-width: 100%; max-height: 100%; object-fit: contain;">
							</div>
							<div style="padding: 15px; text-align: center;">
								<h2 style="margin: 0 0 10px; font-size: 18px; color: #333;">{{ station.model }}</h2>
								<a href="#" class="start-supervision-btn" data-bs-toggle="modal" data-bs-target="#stepByStepModal" data-id="{{ station.id }}" data-model="{{ station.model }}" style="display: block; margin-top: 10px; font-size: 2rem; color: #28a745; transition: color 0.3s; position: relative; z-index: 2;" onmouseover="this.style.color='#218838';" onmouseout="this.style.color='#28a745';">
									<i class="bi bi-play-circle-fill"></i>
								</a>
							</div>
						</div>
					{% else %}
						<p>Aucune borne pour ce client.</p>
					{% endfor %}
				</div>
			</div>
		{% else %}
			<p>Aucun client trouvé.</p>
		{% endfor %}
	</div>

	<div class="modal fade" id="stepByStepModal" tabindex="-1" aria-labelledby="stepByStepModalLabel" aria-hidden="true">
		<div class="modal-dialog modal-lg modal-fullscreen-md-down">
			<div class="modal-content">

				<div class="modal-header" style="background: linear-gradient(90deg, #ff7e5f, #ff3f81); color: white;">
					<h5 class="modal-title" id="stepByStepModalLabel">
						<i class="bi bi-lightning-charge-fill text-warning"></i>
						Mise en supervision
					</h5>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer"></button>
				</div>

				<div class="modal-body text-center">

					<div class="step-indicator mb-2">
						<strong>Étape
							<span id="currentStepDoc">1</span>
							/
							<span id="totalStepsDoc">9</span>
						</strong>
					</div>

					<div class="progress mb-3" style="height: 5px;">
						<div id="stepProgressBar" class="progress-bar bg-success" style="width: 0%; transition: width 0.3s;"></div>
					</div>

					<div class="image-container text-center position-relative">
						<img id="stepImage" src="" alt="Documentation Image" class="img-fluid" style="max-width: 100%; max-height: 500px; object-fit: contain; border-radius: 10px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); cursor: pointer;">
					</div>

                    <div class="form-step" id="customStepSupervision">

					<div id="notificationContainer" class="position-fixed top-0 end-0 p-3" style="z-index: 1050;">
					</div>

                        <h3>Finalisation de la supervision</h3>

                        <input type="text" id="chargingStationName" class="form-control mb-2" placeholder="Nom de la borne" required oninput="checkInput()">

                        <button id="startSupervision" class="btn btn-primary">
                            <i class="bi bi-play-circle"></i> Démarrer les test
                        </button>

                        <div class="step-icons d-flex justify-content-center mb-4 d-none">
                            <div class="step-circle" id="stepIcon1">
                                <i class="bi bi-plug"></i>
                            </div>
                            <div class="step-line"></div>
                            <div class="step-circle" id="stepIcon2">
                                <i class="bi bi-clipboard-check"></i>
                            </div>
                            <div class="step-line"></div>
                            <div class="step-circle" id="stepIcon3">
                                <i class="bi bi-check-circle"></i>
                            </div>
                        </div>

                        <div id="stepContent" class="d-none">
                            <p>Connexion à la borne...</p>
                            <div class="loader"></div>
                        </div>

                        <div id="finalStepContent" class="d-none">
                            <p>Supervision terminée avec succès !</p>
                        </div>
                    </div>

					<div class="d-flex justify-content-between mt-3">
						<button class="btn btn-secondary prev-step rounded-3 rounded-pill">
							<i class="bi bi-arrow-left"></i>
							Précédent
						</button>
						<button class="btn btn-primary next-step rounded-3 rounded-pill">
							Suivant
							<i class="bi bi-arrow-right"></i>
						</button>
					</div>
				</div>
			</div>
		</div>
	</div>

</div>

{# Modal ajouter un client #}
<div class="modal fade" id="progressModal">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="modalTitle">
					<i class="bi bi-gear"></i>
					Information du client
				</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal"></button>
			</div>
			<div class="step-indicator mb-2">
				<strong>Étape
					<span id="currentStepForm">1</span>
					/
					<span id="totalStepsForm">2</span>
				</strong>
			</div>

			<div class="modal-body">
				<div class="progress mb-3 " style="height: 5px;">
					<div id="progressStep1" class="progress-bar bg-success bg-success" style="width: 50%;"></div>
					<div id="progressStep2" class="progress-bar bg-secondary bg-success" style="width: 50%;"></div>
				</div>

				{% set prototype_intervention %}
				<div class="intervention-item row align-items-center">
					<div class="col-md-5 d-flex flex-column justify-content-center">
						<label class="form-label mb-0">
							{{ form_label(interventionForm.interventions.vars.prototype.sim, 'Numéro de SIM') }}
						</label>
						{{ form_widget(interventionForm.interventions.vars.prototype.sim, {
                        'attr': {'class': 'form-control gradient-input'}
                        }) }}
					</div>

					<div class="col-md-7 d-flex align-items-end">
						<div class="flex-grow-1">
							<label class="form-label mb-0">
								{{ form_label(interventionForm.interventions.vars.prototype.chargingStation, 'Borne
                                de recharge') }}
							</label>
							<div class="d-flex align-items-center">
								{{ form_widget(interventionForm.interventions.vars.prototype.chargingStation, {
                                'attr': {'class': 'form-select gradient-input'}
                                }) }}

								<button type="button" class="btn text-white remove-intervention ms-2" style="background: linear-gradient(to right, #ff4081, #ff8c00);
																															                                    border: none;
																															                                    border-radius: 8px;
																															                                    box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.15);">
									<i class="bi bi-trash"></i>
								</button>

							</div>
						</div>
					</div>
				</div>
				{% endset %}

				<form id="multiStepForm" method="post" action="{{ path('app_submit_form') }}">
					{{ form_start(clientForm, {'attr': {'id': 'multiStepForm'}}) }}

					<div class="form-step mb-4" id="step1">
						{{ form_widget(clientForm) }}
					</div>

					<div class="form-step d-none mb-4" id="step2">
						{{ form_widget(interventionForm) }}

						<div class="mb-3 text-end">
							<div class="d-flex justify-content-end mb-3">
								<button type="button" id="addIntervention" class="btn text-white fw-bold rounded-pill" style="background: linear-gradient(to right, #ff4081, #ff8c00);
																															                                               border: none;
																															                                               border-radius: 30px;
																															                                               padding: 10px 16px;
																															                                               font-size: 14px;
																															                                               box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.15);">
									<i class="bi bi-plus-circle me-2"></i>
									Ajouter une borne
								</button>
							</div>


						</div>

						<div id="interventionContainer" data-prototype="{{ prototype_intervention|e('html_attr') }}"></div>
					</div>

					<div class="modal-footer">
						<button type="button" id="prevBtn" class="btn btn-secondary d-none rounded-3 rounded-pill">
							<i class="bi bi-arrow-left"></i>
							Précédent
						</button>
						<button type="button" id="nextBtn" class="btn btn-primary rounded-3 rounded-pill">
							Suivant
							<i class="bi bi-arrow-right"></i>
						</button>
						<button type="submit" id="submitBtn" class="btn btn-success d-none rounded-3 rounded-pill">
							<i class="bi bi-check-circle"></i>
							Envoyer
						</button>
					</div>

					{{ form_end(clientForm) }}
				</form>
			</div>
		</div>
	</div>
</div></div> <script>
	document.addEventListener("DOMContentLoaded", function () {
	    const stepModal = document.getElementById('stepByStepModal');
	    const progressBarStep = document.getElementById('stepProgressBar');
	    const stepImageStep = document.getElementById('stepImage');
	    const stepIndicatorStep = document.getElementById("currentStepDoc");
	    const totalStepsStep = document.getElementById("totalStepsDoc");
	    const customStep = document.getElementById("customStepSupervision");
	    const prevBtn = document.querySelector('.prev-step');
	    const nextBtn = document.querySelector('.next-step');
	
	    const steps = [
	        "{{ asset('build/images/Documentation/Taille_maquette.png') }}",
	        "{{ asset('build/images/Documentation/Taille_maquette.png') }}",
	        "{{ asset('build/images/Documentation/Taille_maquette.png') }}",
            "{{ asset('build/images/Documentation/Taille_maquette.png') }}",
            "{{ asset('build/images/Documentation/Taille_maquette.png') }}",
	    ];
	
	    let totalSteps = steps.length + 1;
	    let currentStep = 0;
	    totalStepsStep.textContent = totalSteps;
	
	    function showStep(index) {
	        stepImageStep.classList.remove("d-none");
	        customStep.classList.add("d-none");
	
	        if (index < steps.length) {
	            stepImageStep.src = steps[index];
	        } else {
	            stepImageStep.classList.add("d-none");
	            customStep.classList.remove("d-none");
	        }
	
	        const progressPercentage = (index / (totalSteps - 1)) * 100;
	        progressBarStep.style.width = `${progressPercentage}%`;
	        prevBtn.classList.toggle("d-none", index === 0);
	        nextBtn.classList.toggle("d-none", index === totalSteps - 1);
	        stepIndicatorStep.textContent = index + 1;
	    }
	
	    stepModal.addEventListener('show.bs.modal', function () {
	        currentStep = 0;
	        showStep(currentStep);
	    });
	
	    nextBtn.addEventListener('click', function () {
	        if (currentStep < totalSteps - 1) {
	            currentStep++;
	            showStep(currentStep);
	        }
	    });
	
	    prevBtn.addEventListener('click', function () {
	        if (currentStep > 0) {
	            currentStep--;
	            showStep(currentStep);
	        }
	    });
	});
	
		</script> <script>
		    document.addEventListener("DOMContentLoaded", function () {
		        let currentStep = 1;
		        const totalSteps = 2;
		
		        const stepIndicatorForm = document.getElementById("currentStepForm");
		        const totalStepsFormElem = document.getElementById("totalStepsForm");
		
		        if (!stepIndicatorForm) {
		            console.error("stepIndicatorForm est introuvables.");
		            return;
		        }
		
		            if (!totalStepsFormElem) {
		            console.error("totalStepsFormElem est introuvables.");
		            return;
		        }
		
		        totalStepsFormElem.textContent = totalSteps;
		
		        function updateStep() {
		            document.querySelectorAll(".form-step").forEach(step => step.classList.add("d-none"));
		            let currentStepElement = document.getElementById("step" + currentStep);
		            if (currentStepElement) {
		                currentStepElement.classList.remove("d-none");
		            }
		
		            let progressPercentage = ((currentStep - 1) / (totalSteps - 1)) * 100;
		            let progressStep1 = document.getElementById("progressStep1");
		            let progressStep2 = document.getElementById("progressStep2");
		
		            if (progressStep1 && progressStep2) {
		                progressStep1.style.width = `${progressPercentage}%`;
		                progressStep2.style.width = `${100 - progressPercentage}%`;
		
		                progressStep1.classList.toggle("bg-success", currentStep >= 1);
		                progressStep2.classList.toggle("bg-success", currentStep === 2);
		            }
		
		            let modalTitle = document.getElementById("modalTitle");
		            if (modalTitle) {
		                modalTitle.textContent = currentStep === 1 ? "Information du client" : "Information de l'installation";
		            }
		
		            let prevBtn = document.getElementById("prevBtn");
		            let nextBtn = document.getElementById("nextBtn");
		            let submitBtn = document.getElementById("submitBtn");
		
		            if (prevBtn && nextBtn && submitBtn) {
		                prevBtn.classList.toggle("d-none", currentStep === 1);
		                nextBtn.classList.toggle("d-none", currentStep === totalSteps);
		                submitBtn.classList.toggle("d-none", currentStep !== totalSteps);
		            }
		
		            stepIndicatorForm.textContent = currentStep;
		        }
		
		        document.getElementById("progressModal").addEventListener("show.bs.modal", function () {
		            currentStep = 1;
		            updateStep();
		        });
		
		        let nextBtn = document.getElementById("nextBtn");
		        let prevBtn = document.getElementById("prevBtn");
		        let submitBtn = document.getElementById("submitBtn");
		
		        if (nextBtn) {
		            nextBtn.addEventListener("click", () => {
		                if (currentStep < totalSteps) {
		                    currentStep++;
		                    updateStep();
		                }
		            });
		        }
		
		        if (prevBtn) {
		            prevBtn.addEventListener("click", () => {
		                if (currentStep > 1) {
		                    currentStep--;
		                    updateStep();
		                }
		            });
		        }
		
		        if (submitBtn) {
		            submitBtn.addEventListener("click", function (event) {
		                event.preventDefault();
		                let form = document.getElementById("multiStepForm");
		                if (!form) return;
		                submitBtn.disabled = true;
		                form.submit();
		            });
		        }
		
		        let form = document.getElementById("multiStepForm");
		        if (form) {
		            form.addEventListener("submit", function (event) {
		                event.preventDefault();
		                setTimeout(() => {
		                    this.submit();
		                }, 1000);
		            });
		        }
		    });
		</script>
<script>
document.addEventListener("DOMContentLoaded", function () {
    const startButton = document.getElementById("startSupervision");
    const stepContent = document.getElementById("stepContent");
    const finalStepContent = document.getElementById("finalStepContent");
    const stepIconsContainer = document.querySelector(".step-icons");
    const stepIcons = [
        document.getElementById("stepIcon1"),
        document.getElementById("stepIcon2"),
        document.getElementById("stepIcon3")
    ];
    const stepLines = document.querySelectorAll(".step-line");
    const modal = document.getElementById("stepByStepModal");
    const notificationContainer = document.getElementById("notificationContainer");

    const stepsText = [
        "Connexion à la borne...",
        "Vérification des informations...",
        "Finalisation de la supervision..."
    ];

    async function startSupervisionProcess() {
        const stationName = document.getElementById("chargingStationName").value.trim();
        if (!stationName) {
            showNotification("Veuillez entrer le nom de la borne.", "warning");
            return;
        }

        try {
            stepIconsContainer.classList.remove("d-none");
            stepContent.classList.remove("d-none");
            finalStepContent.classList.add("d-none");

            updateStep(0, "Connexion à la borne...");
            const token = await authenticateUser();
            if (!token) throw new Error("Échec de l'authentification");

            updateStep(1, "Vérification des informations...");
            const isBorneValid = await checkChargingStation(token, stationName);
            if (!isBorneValid) throw new Error("Borne introuvable");

            updateStep(2, "Finalisation...");
            const isDisabled = await disableChargingStation(token, stationName);
            if (!isDisabled) throw new Error("Échec de la supervisions");

            stepContent.classList.add("d-none");
            finalStepContent.classList.remove("d-none");
            showNotification("Borne supervisée avec succès !", "success");

        } catch (error) {
            console.error("Erreur:", error);
            showNotification(error.message, "danger");
        }
    }

    function updateStep(stepIndex, message) {
        stepIcons[stepIndex].classList.add("active");
        if (stepIndex > 0) {
            stepLines[stepIndex - 1].style.backgroundColor = "#28a745";
        }

        stepContent.innerHTML = `<p>${message}</p><div class="loader"></div>`;
    }

    function showNotification(message, type) {
        const notification = document.createElement("div");
        notification.className = `alert alert-${type} alert-dismissible fade show`;
        notification.role = "alert";
        notification.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        `;

        notificationContainer.appendChild(notification);

        setTimeout(() => {
            notification.classList.remove("show");
            setTimeout(() => notification.remove(), 500);
        }, 5000);
    }

    async function authenticateUser() {
        const response = await fetch("https://lodmi.charge-angels.com/v1/auth/signin", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                email: "partenaire@partenaire.com",
                password: "aDTQE83e2XkBaxTU@@",
                acceptEula: true,
                acceptPrivacy: true,
                tenant: "lodmi"
            })
        });

        if (!response.ok) {
            console.error("Erreur d'authentification:", response.status);
            return null;
        }

        const data = await response.json();
        return data.token;
    }

	async function checkChargingStation(token, stationName) {
		updateStep(1, "Vérification des informations...");

		const response = await fetch(`https://lodmi.charge-angels.com/v1/api/charging-stations/${stationName}`, {
			method: "GET",
			headers: { "Authorization": `Bearer ${token}` }
		});

		if (!response.ok) {
			updateStep(1, "Un problème est survenu");
			showNotification("Merci de vérifier que la borne est bien connectée à Internet.", "warning");
			throw new Error("Borne déconnectée");
		}

		const data = await response.json();

		// Vérifier si la borne est inactive
		if (data.inactive === true) {
			updateStep(1, "Un problème est survenu");
			showNotification("Merci de vérifier que la borne est bien connectée à Internet.", "warning");
			throw new Error("Borne déconnectée");
		}

		return true;
	}

    async function disableChargingStation(token, stationName) {
        const response = await fetch(`https://lodmi.charge-angels.com/v1/api/charging-stations/${stationName}/availability/change`, {
            method: "PUT",
            headers: {
                "Authorization": `Bearer ${token}`,
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                "status": "accepted",
                "args": {
                    "connectorId": 0,
                    "type": "Inoperative"
                }
            })
        });

        return response.ok;
    }

    startButton.addEventListener("click", startSupervisionProcess);

    modal.addEventListener("hidden.bs.modal", resetProcess);

    function resetProcess() {
        stepIcons.forEach(icon => icon.classList.remove("active"));
        stepLines.forEach(line => line.style.backgroundColor = "#ddd");
        stepIconsContainer.classList.add("d-none");
        stepContent.classList.add("d-none");
        finalStepContent.classList.add("d-none");
    }
});

</script>

{% endblock %}