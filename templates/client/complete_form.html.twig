<!DOCTYPE html>
<html lang="fr">
 
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Formulaire en 2 étapes</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
  {{
  encore_entry_link_tags("app")
  }}
  <link rel="stylesheet" href="{{ asset('css/app.css') }}" />
  <style>
    body {
      background: url('../build/images/background.png') no-repeat center center fixed;
      background-size: cover;
      margin: 0;
      padding: 0;
      min-height: 100vh;
    }
 
    .container-form-steps {
      width: 90%;
      max-width: 700px;
      margin: 0 auto;
      padding: 40px 0;
    }
 
    .form-container {
      background: #fff;
      padding: 30px;
      border-radius: 30px;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }
 
    .step {
      display: none;
    }
 
    .step.active {
      display: block;
    }
 
    .step-navigation {
      display: flex;
      margin-top: 20px;
    }
 
    .btn-next,
    .btn-prev,
    .btn-submit {
      background: linear-gradient(45deg, #ec008c, #f6941f);
      color: #fff;
      border: none;
      padding: 12px 20px;
      border-radius: 40px;
      cursor: pointer;
      font-size: 1rem;
      font-weight: bold;
      transition: background 0.3s ease;
    }
 
    .progress-bar-gradient {
      background: linear-gradient(45deg, #ec008c, #f6941f);
    }
 
 
    .btn-prev {
      background: gray;
    }
 
    .btn-next:hover,
    .btn-prev:hover,
    .btn-submit:hover {
      opacity: 0.8;
    }
 
    @media (max-width: 576px) {
      .form-container {
        padding: 15px;
      }
    }
  </style>
</head>
 
<body>
 
  {% block body %}
  <div class="container-form-steps">
    <div class="form-container">
 
      <h3 class="text-center mb-3">Complétez vos informations</h3>
 
      <div class="progress mb-4" style="height: 4px;">
        <div id="progress-bar" class="progress-bar progress-bar-gradient" role="progressbar" style="width: 25%;"
          aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">
        </div>
      </div>
 
      {{ form_start(form, {'attr': {'class': 'needs-validation', 'novalidate': 'novalidate'}}) }}
 
      <div id="step-1" class="step active">
        <h4>Bienvenue</h4>
        <div class="mb-3">
          En poursuivant, vous certifiez que toutes les informations que vous
          allez renseigner sont exactes, véridiques et conformes à la réalité.
          Toute tentative de fournir des informations erronées, falsifiées ou
          trompeuses pourrait entraîner des mesures appropriées, y compris
          l’annulation de votre demande ou la restriction de l’accès à nos services.
        </div>
        <div class="step-navigation d-flex justify-content-end">
          <button type="button" class="btn-next btn btn-primary" data-step="1">
            Suivant <i class="bi bi-arrow-right"></i>
          </button>
        </div>
 
      </div>
 
      <div id="step-2" class="step">
        <h4>Vos informations</h4>
 
        <div class="row">
          <div class="col-md-6 mb-3">
            {{ form_label(form.name) }}
            {{ form_widget(form.name, {'attr': {'class': 'form-control'}}) }}
          </div>
          <div class="col-md-6 mb-3">
            {{ form_label(form.lastname) }}
            {{ form_widget(form.lastname, {'attr': {'class': 'form-control'}}) }}
          </div>
        </div>
 
        <div class="row">
          <div class="col-md-6 mb-3">
            {{ form_label(form.numberTva) }}
            {{ form_widget(form.numberTva, {'attr': {'class': 'form-control'}}) }}
          </div>
          <div class="col-md-6 mb-3">
            {{ form_label(form.societyName) }}
            {{ form_widget(form.societyName, {'attr': {'class': 'form-control'}}) }}
          </div>
        </div>
 
        <div class="row">
          <div class="col-md-6 mb-3">
            {{ form_label(form.siret) }}
            {{ form_widget(form.siret, {'attr': {'class': 'form-control'}}) }}
          </div>
          <div class="col-md-6 mb-3">
            {{ form_label(form.codeNaf) }}
            {{ form_widget(form.codeNaf, {'attr': {'class': 'form-control'}}) }}
          </div>
        </div>
 
        <div class="row">
          <div class="col-md-6 mb-3">
            {{ form_label(form.phone) }}
            {{ form_widget(form.phone, {'attr': {'class': 'form-control'}}) }}
          </div>
          <div class="col-md-6 mb-3">
            {{ form_label(form.email) }}
            {{ form_widget(form.email, {'attr': {'class': 'form-control'}}) }}
          </div>
        </div>
 
        <div class="row">
          <div class="col-md-6 mb-3">
            {{ form_label(form.adress) }}
            {{ form_widget(form.adress, {'attr': {'class': 'form-control'}}) }}
          </div>
          <div class="col-md-6 mb-3">
            {{ form_label(form.legalForm) }}
            {{ form_widget(form.legalForm, {'attr': {'class': 'form-control'}}) }}
          </div>
        </div>
 
        <div class="step-navigation d-flex justify-content-between">
          <button type="button" class="btn-prev btn btn-secondary" onclick="prevStep()">
            <i class="bi bi-arrow-left"></i> Précédent
          </button>
          <button type="button" class="btn-next btn btn-primary" data-step="2">
            Suivant <i class="bi bi-arrow-right"></i>
          </button>
        </div>
 
      </div>
 
      <div id="step-3" class="step">
        <h4>Tarification</h4>
        <div class="mb-3">
          <label class="form-label">Nombre de badges gratuits</label>
          <input type="number" class="form-control" name="freeBadges" min="0" required />
        </div>
 
        {% for station in chargingStations %}
        <h5>Borne : {{ station.model }}</h5>
        <img src="{{ asset('uploads/' ~ station.image) }}" alt="Logo Fabricant" width="90" />
        <div class="row">
          <div class="col-md-6">
            <div class="mb-3">
              <label class="form-label">Prix achat kW</label>
              <input type="number" class="form-control" name="priceKwh_{{ station.id }}" required />
            </div>
          </div>
          <div class="col-md-6">
            <div class="mb-3">
              <label class="form-label">Prix revente kW</label>
              <input type="number" class="form-control" name="priceResale_{{ station.id }}" required />
            </div>
          </div>
          <div class="col-md-6">
            <div class="mb-3">
              <label class="form-label">Prix publique kW</label>
              <input type="number" class="form-control" name="pricePublic_{{ station.id }}" required />
            </div>
          </div>
        </div>
        {% endfor %}
        {% if chargingStations|length > 1 %}
        <div class="mb-3 text-center">
          <button type="button" class="btn btn-secondary" onclick="applyPriceToAll()">
            Affecter le prix à toutes les bornes
          </button>
        </div>
        {% endif %}
 
        <div class="step-navigation d-flex justify-content-between">
          <button type="button" class="btn-prev btn btn-secondary" onclick="prevStep()">
            <i class="bi bi-arrow-left"></i> Précédent
          </button>
          <button type="button" class="btn-next btn btn-primary" data-step="3">
            Suivant <i class="bi bi-arrow-right"></i>
          </button>
        </div>
 
      </div>
 
      <div id="step-4" class="step">
        <h4>Informations de la borne</h4>
        {% for station in chargingStations %}
        <h5>Borne : {{ station.model }}</h5>
        <div class="row">
          <div class="col-md-6">
            <div class="mb-3">
              <label class="form-label">Public</label>
              <select class="form-control" name="public_{{ station.id }}">
                <option value="1">Oui</option>
                <option value="0">Non</option>
              </select>
            </div>
          </div>
          <div class="col-md-6">
            <div class="mb-3">
              <label class="form-label">Adresse</label>
              <input type="text" class="form-control" name="adress_{{ station.id }}" required />
            </div>
          </div>
        </div>
        <div class="row">
          <div class="col-md-6">
            <div class="mb-3">
              <label class="form-label">Date d'installation</label>
              <input type="date" class="form-control" name="installedAt_{{ station.id }}" required />
            </div>
          </div>
          <div class="col-md-6">
            <div class="mb-3">
              <label class="form-label">Date de supervision</label>
              <input type="date" class="form-control" name="supervisedAt_{{ station.id }}" required />
            </div>
          </div>
        </div>
        {% endfor %}
        {% if chargingStations|length > 1 %}
        <div class="mb-3 text-center">
          <button type="button" class="btn btn-secondary" onclick="applyStationInfoToAll()">
            Affecter les informations à toutes les bornes
          </button>
        </div>
        {% endif %}
 
        <div class="step-navigation d-flex justify-content-between">
          <button type="button" class="btn-prev" onclick="prevStep()">
            <i class="bi bi-arrow-left"></i> Précédent
          </button>
          <button type="submit" class="btn-submit btn btn-success">
            Valider <i class="bi bi-check"></i>
          </button>
        </div>
 
      </div>
 
      {{ form_end(form) }}
    </div>
  </div>
  {% endblock %}
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js"></script>
  <script>
    function applyPriceToAll() {
      try {
        const sourcePurchaseInput = document.querySelector('input[name^="priceKwh_"]');
        const sourceResaleInput = document.querySelector('input[name^="priceResale_"]');
        const sourcePublicInput = document.querySelector('input[name^="pricePublic_"]');
 
        if (!sourcePurchaseInput || !sourceResaleInput || !sourcePublicInput) {
          alert("Impossible de trouver les champs de prix pour la première borne.");
          return;
        }
 
        const sourcePurchase = sourcePurchaseInput.value;
        const sourceResale = sourceResaleInput.value;
        const sourcePublic = sourcePublicInput.value;
 
        if (sourcePurchase === "" || sourceResale === "" || sourcePublic === "") {
          alert("Veuillez remplir tous les prix (achat, revente et public) pour la première borne.");
          return;
        }
 
        document.querySelectorAll('input[name^="priceKwh_"]').forEach((input) => {
          input.value = sourcePurchase;
        });
        document.querySelectorAll('input[name^="priceResale_"]').forEach((input) => {
          input.value = sourceResale;
        });
        document.querySelectorAll('input[name^="pricePublic_"]').forEach((input) => {
          input.value = sourcePublic;
        });
      } catch (error) {
        console.error("Erreur lors de l'application des prix à toutes les bornes :", error);
        alert("Une erreur est survenue lors de l'application des prix. Veuillez réessayer.");
      }
    }
 
    function applyStationInfoToAll() {
      try {
        const firstPublic = document.querySelector('select[name^="public_"]');
        const firstAddress = document.querySelector('input[name^="adress_"]');
        const firstInstalled = document.querySelector('input[name^="installedAt_"]');
        const firstSupervised = document.querySelector('input[name^="supervisedAt_"]');
 
        if (!firstPublic || !firstAddress || !firstInstalled || !firstSupervised) {
          alert("Impossible de trouver les informations de la première borne.");
          return;
        }
        const valuePublic = firstPublic.value;
        const valueAddress = firstAddress.value;
        const valueInstalled = firstInstalled.value;
        const valueSupervised = firstSupervised.value;
 
        if (valueAddress === "" || valueInstalled === "" || valueSupervised === "") {
          alert("Veuillez remplir toutes les informations de la première borne.");
          return;
        }
        document.querySelectorAll('select[name^="public_"]').forEach((select, index) => {
          if (index > 0) {
            select.value = valuePublic;
          }
        });
        document.querySelectorAll('input[name^="adress_"]').forEach((input, index) => {
          if (index > 0) {
            input.value = valueAddress;
          }
        });
        document.querySelectorAll('input[name^="installedAt_"]').forEach((input, index) => {
          if (index > 0) {
            input.value = valueInstalled;
          }
        });
        document.querySelectorAll('input[name^="supervisedAt_"]').forEach((input, index) => {
          if (index > 0) {
            input.value = valueSupervised;
          }
        });
      } catch (error) {
        console.error("Erreur lors de l'application des informations à toutes les bornes :", error);
        alert("Une erreur est survenue lors de l'application des informations. Veuillez réessayer.");
      }
    }
 
    document.addEventListener("DOMContentLoaded", function () {
      let currentStep = parseInt(localStorage.getItem("currentStep")) || 1;
      const totalSteps = 4;
 
      function showStep(step) {
        document.querySelectorAll(".step").forEach((stepDiv) => stepDiv.classList.remove("active"));
        document.getElementById(`step-${step}`).classList.add("active");
        localStorage.setItem("currentStep", step);
        updateProgressBar(step);
      }
 
      function nextStep() {
        if (!validateStep(currentStep)) {
          console.log(`❌ Erreurs détectées à l'étape ${currentStep}.`);
          return;
        }
        if (currentStep < totalSteps) {
          currentStep++;
          showStep(currentStep);
        }
      }
 
      function prevStep() {
        if (currentStep > 1) {
          currentStep--;
          showStep(currentStep);
        }
      }
 
      window.nextStep = nextStep;
      window.prevStep = prevStep;
 
      function validateStep(step) {
        let isValid = true;
        const fields = document.querySelectorAll(`#step-${step} input, #step-${step} select`);
        fields.forEach((field) => {
          field.classList.remove("is-invalid");
          let errorMessage = validateField(field);
          if (errorMessage) {
            isValid = false;
            showError(field, errorMessage);
          }
        });
        console.log(`Validation de l'étape ${step}: ${isValid}`);
        return isValid;
      }
 
      function validateField(field) {
        const value = field.value.trim();
        if (!value) {
          return "Ce champ est obligatoire";
        }
        return null;
      }
 
      function showError(field, message) {
        field.classList.add("is-invalid");
        let parent = field.closest(".mb-3") || field.parentNode;
        let errorDiv = parent.querySelector(".error-message");
        if (!errorDiv) {
          errorDiv = document.createElement("div");
          errorDiv.className = "error-message text-danger mt-1";
          errorDiv.innerText = message;
          parent.appendChild(errorDiv);
        } else {
          errorDiv.innerText = message;
        }
      }
 
      function updateProgressBar(step) {
        const progress = (step / totalSteps) * 100;
        const progressBar = document.getElementById("progress-bar");
        if (progressBar) {
          progressBar.style.width = `${progress}%`;
          progressBar.setAttribute("aria-valuenow", progress);
        }
      }
 
      document.querySelectorAll(".btn-next").forEach((button) => {
        button.addEventListener("click", function (event) {
          event.preventDefault();
          nextStep();
        });
      });
 
      document.querySelectorAll(".btn-prev").forEach((button) => {
        button.addEventListener("click", function (event) {
          event.preventDefault();
          prevStep();
        });
      });
 
      showStep(currentStep);
    });
  </script>
</body>
 
</html>