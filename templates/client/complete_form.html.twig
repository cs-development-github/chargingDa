<!DOCTYPE html>
<html lang="fr">

	<head>
		<meta charset="UTF-8"/>
		<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
		<title>Contrat de supervision</title>
		<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet"/>
		<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css"/>
		<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet">
		 <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
		 <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
		{{
  encore_entry_link_tags("app")
  }}
		<link rel="stylesheet" href="{{ asset('css/app.css') }}"/> <style>
			body {
				background: url('../build/images/background.png') no-repeat center center fixed;
				background-size: cover;
				margin: 0;
				padding: 0;
				min-height: 100vh;
			}

			.container-form-steps {
				width: 90%;
				max-width: 700px;
				margin: 0 auto;
				padding: 40px 0;
			}

			.form-container {
				background: #fff;
				padding: 30px;
				border-radius: 30px;
				box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
			}

			.step {
				display: none;
			}

			.step.active {
				display: block;
			}

			.step-navigation {
				display: flex;
				margin-top: 20px;
			}

			.btn-next,
			.btn-prev,
			.btn-submit {
				background: linear-gradient(45deg, #ec008c, #f6941f);
				color: #fff;
				border: none;
				padding: 12px 20px;
				border-radius: 40px;
				cursor: pointer;
				font-size: 1rem;
				font-weight: bold;
				transition: background 0.3s ease;
			}

			.progress-bar-gradient {
				background: linear-gradient(45deg, #ec008c, #f6941f);
			}


			.btn-prev {
				background: gray;
			}

			.btn-next:hover,
			.btn-prev:hover,
			.btn-submit:hover {
				opacity: 0.8;
			}

			@media(max-width: 576px) {
				.form-container {
					padding: 15px;
				}
			}
		</style>
	</head>

	<body>

		{% block body %}
			<div class="container-form-steps">
				<div class="form-container">

					<h3 class="text-center mb-3">Complétez vos informations</h3>

					<div class="progress mb-4" style="height: 4px;">
						<div id="progress-bar" class="progress-bar progress-bar-gradient" role="progressbar" style="width: 25%;" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100"></div>
					</div>

					{{ form_start(form, {'attr': {'class': 'needs-validation', 'novalidate': 'novalidate'}}) }}

					<div id="step-1" class="step active">
						<h4>Dernière étape pour activer votre supervision !</h4>
						<div class="mb-3">
							Vous y êtes presque ! Avant de finaliser, merci de vérifier que toutes les informations saisies sont exactes et conformes à la réalité. Cela nous permet d’assurer une mise en service rapide et sans souci.
																					          En validant cette étape, vous confirmez l’authenticité de vos données. Toute erreur pourrait entraîner des ajustements ou retarder l’activation de votre supervision.
																					          Merci pour votre confiance, Lodmi s’occupe du reste !
						</div>
						<div class="step-navigation d-flex justify-content-end">
							<button type="button" class="btn-next btn btn-primary" data-step="1">
								Suivant
								<i class="bi bi-arrow-right"></i>
							</button>
						</div>

					</div>

					<div id="step-2" class="step">
						<h4>Vos informations</h4>

						<div class="row">
							<div class="col-md-6 mb-3">
								{{ form_label(form.name) }}
								{{ form_widget(form.name, {'attr': {'class': 'form-control'}}) }}
							</div>
							<div class="col-md-6 mb-3">
								{{ form_label(form.lastname) }}
								{{ form_widget(form.lastname, {'attr': {'class': 'form-control'}}) }}
							</div>
						</div>

						<div class="row">
							<div class="col-md-6 mb-3">
								{{ form_label(form.numberTva) }}
								{{ form_widget(form.numberTva, {'attr': {'class': 'form-control'}}) }}
							</div>
							<div class="col-md-6 mb-3">
								{{ form_label(form.societyName) }}
								{{ form_widget(form.societyName, {'attr': {'class': 'form-control'}}) }}
							</div>
						</div>

						<div class="row">
							<div class="col-md-6 mb-3">
								{{ form_label(form.siret) }}
								{{ form_widget(form.siret, {'attr': {'class': 'form-control'}}) }}
							</div>
							<div class="col-md-6 mb-3">
								{{ form_label(form.codeNaf) }}
								{{ form_widget(form.codeNaf, {'attr': {'class': 'form-control'}}) }}
							</div>
						</div>

						<div class="row">
							<div class="col-md-6 mb-3">
								{{ form_label(form.phone) }}
								{{ form_widget(form.phone, {'attr': {'class': 'form-control'}}) }}
							</div>
							<div class="col-md-6 mb-3">
								{{ form_label(form.email) }}
								{{ form_widget(form.email, {'attr': {'class': 'form-control'}}) }}
							</div>
						</div>

						<div class="row">

							<div class="col-md-6 mb-3">
								{{ form_label(form.address.fullAddress) }}
								{{ form_widget(form.address.fullAddress, {
                'attr': {
                  'class': 'form-control',
                  'id': 'address-autocomplete',
                  'autocomplete': 'off'
                }
            }) }}

								<div id="autocomplete-results" class="list-group position-absolute z-3" style="width: 100%; max-height: 200px; overflow-y: auto; display: none;"></div>

								{{ form_widget(form.address.streetNumber, {'attr': {'id': 'client_contract_form_address_streetNumber'}}) }}
								{{ form_widget(form.address.streetName, {'attr': {'id': 'client_contract_form_address_streetName'}}) }}
								{{ form_widget(form.address.postalCode, {'attr': {'id': 'client_contract_form_address_postalCode'}}) }}
								{{ form_widget(form.address.city, {'attr': {'id': 'client_contract_form_address_city'}}) }}
								{{ form_widget(form.address.country, {'attr': {'id': 'client_contract_form_address_country'}}) }}
								{{ form_row(form.address.latitude, {'attr': {'id': 'latitude'}}) }}
								{{ form_row(form.address.longitude, {'attr': {'id': 'longitude'}}) }}
								{{ form_row(form.address.region, {'attr': {'id': 'region'}}) }}
								{{ form_row(form.address.department, {'attr': {'id': 'department'}}) }}
							</div>

							<div class="col-md-6 mb-3">
								{{ form_label(form.legalForm) }}
								{{ form_widget(form.legalForm, {'attr': {'class': 'form-control'}}) }}
							</div>
						</div>

						<div class="step-navigation d-flex justify-content-between">
							<button type="button" class="btn-prev btn btn-secondary" onclick="prevStep()">
								<i class="bi bi-arrow-left"></i>
								Précédent
							</button>
							<button type="button" class="btn-next btn btn-primary" data-step="2">
								Suivant
								<i class="bi bi-arrow-right"></i>
							</button>
						</div>

					</div>

					<div id="step-3" class="step">
						<h4>Tarification</h4>
						<div class="mb-3">
							<label class="form-label">Badges avec accès au tarif coûtant
								<i class="bi bi-info-circle-fill text-primary" data-bs-toggle="tooltip" data-bs-placement="top" title="Le badge permet un accès à l’énergie au tarif d’achat, sans marge commerciale."></i>
							</label>
							<input type="number" class="form-control" name="freeBadges" min="0" required/>
						</div>

						{% for station in chargingStations %}
							<h5>Borne :
								{{ station.model }}</h5>
							<img
							src="{{ asset('uploads/' ~ station.image) }}" alt="Logo Fabricant" width="90" class="mb-3"/>

							<!-- Prix d’achat (coût fournisseur) -->
							<div class="card mb-4 border-info">
								<div class="card-header bg-info text-white">
									Coût d'achat
								</div>
								<div class="card-body">
									<div class="row">
										<div class="col-md-6 mb-3">
											<label class="form-label">
												Prix d'achat du kWh (€)
												<i class="bi bi-info-circle-fill text-primary" data-bs-toggle="tooltip" data-bs-placement="top" title="Coût réel du kWh tel qu’il vous est facturé par le fournisseur."></i>
											</label>
											<input type="number" step="0.01" class="form-control" name="priceKwh_{{ station.id }}" required/>
										</div>
									</div>
								</div>
							</div>

							<!-- Tarifs en deux colonnes -->
							<div
								class="row">
								<!-- Tarif Public -->
								<div class="col-md-6">
									<div class="card mb-4 h-100">
										<div class="card-header bg-primary text-white">
											Tarif public
										</div>
										<div class="card-body">
											<div class="mb-3">
												<label class="form-label">
													Prix public du kWh (€)
													<i class="bi bi-info-circle-fill text-primary" data-bs-toggle="tooltip" data-bs-placement="top" title="Prix de vente d’un kilowattheure d’énergie pour un usager sans tarif préférentiel."></i>
												</label>
												<input type="number" step="0.01" class="form-control" name="pricePublic_{{ station.id }}" required/>
											</div>
											<div class="mb-3">
												<label class="form-label">
													Frais fixes (€)
													<i class="bi bi-info-circle-fill text-primary" data-bs-toggle="tooltip" data-bs-placement="top" title="Coût fixe appliqué à chaque session de recharge, peu importe la durée ou l’énergie consommée."></i>
												</label>
												<input type="number" step="0.01" class="form-control" name="fixedFeePublic_{{ station.id }}" required/>
											</div>
											<div class="mb-3">
												<label class="form-label">
													Temps de recharge (€)
													<i class="bi bi-info-circle-fill text-primary" data-bs-toggle="tooltip" data-bs-placement="top" title="Coût horaire supplémentaire appliqué pendant que le véhicule est en train de se recharger."></i>
												</label>
												<input type="number" step="0.01" class="form-control" name="rechargeTimePublic_{{ station.id }}" required/>
											</div>
											<div class="mb-3">
												<label class="form-label">
													Temps de parking (€)
													<i class="bi bi-info-circle-fill text-primary" data-bs-toggle="tooltip" data-bs-placement="top" title="Coût horaire appliqué lorsque le véhicule reste branché après avoir terminé sa recharge (station occupée inutilement)."></i>
												</label>
												<input type="number" step="0.01" class="form-control" name="parkingTimePublic_{{ station.id }}" required/>
											</div>
										</div>
									</div>
								</div>
								<!-- Tarif Préférentiel -->
								<div class="col-md-6">
									<div class="card mb-4 h-100">
										<div class="card-header bg-success text-white">
											Tarif préférentiel
										</div>
										<div class="card-body">
											<div class="mb-3">
												<label class="form-label">
													Tarif préférentiel du kWh (€)
													<i class="bi bi-info-circle-fill text-primary" data-bs-toggle="tooltip" data-bs-placement="top" title="Prix réduit appliqué à certains usagers (salariés, abonnés, etc.) pour chaque kilowattheure consommé."></i>
												</label>
												<input type="number" step="0.01" class="form-control" name="priceResale_{{ station.id }}" required/>
											</div>
											<div class="mb-3">
												<label class="form-label">
													Frais fixes (€)
													<i class="bi bi-info-circle-fill text-primary" data-bs-toggle="tooltip" data-bs-placement="top" title="Coût fixe appliqué par session de recharge, indépendamment du temps ou de l’énergie."></i>
												</label>
												<input type="number" step="0.01" class="form-control" name="fixedFeeResale_{{ station.id }}" required/>
											</div>
											<div class="mb-3">
												<label class="form-label">
													Temps de recharge (€)
													<i class="bi bi-info-circle-fill text-primary" data-bs-toggle="tooltip" data-bs-placement="top" title="Coût horaire ajouté pendant que le véhicule est en cours de recharge."></i>
												</label>
												<input type="number" step="0.01" class="form-control" name="rechargeTimeResale_{{ station.id }}" required/>
											</div>
											<div class="mb-3">
												<label class="form-label">
													Temps de parking (€)
													<i class="bi bi-info-circle-fill text-primary" data-bs-toggle="tooltip" data-bs-placement="top" title="Coût appliqué par heure lorsque la voiture reste branchée alors qu’elle est déjà chargée."></i>
												</label>
												<input type="number" step="0.01" class="form-control" name="parkingTimeResale_{{ station.id }}" required/>
											</div>
										</div>
									</div>
								</div>

							</div>

						{% endfor %}
						{% if chargingStations|length > 1 %}
							<div class="mb-3 text-center">
								<button type="button" class="btn btn-secondary" onclick="applyPriceToAll()">
									Affecter le prix à toutes les bornes
								</button>
							</div>
						{% endif %}

						<div class="step-navigation d-flex justify-content-between">
							<button type="button" class="btn-prev btn btn-secondary" onclick="prevStep()">
								<i class="bi bi-arrow-left"></i>
								Précédent
							</button>
							<button type="button" class="btn-next btn btn-primary" data-step="3">
								Suivant
								<i class="bi bi-arrow-right"></i>
							</button>
						</div>
					</div>

					<div id="step-4" class="step">
						<h4>Informations de la borne</h4>

						{% for station in chargingStations %}
							<h5>Borne :
								{{ station.model }}</h5>
							<div
								class="row">
								<!-- Public -->
								<div class="col-md-6 mb-3">
									<label class="form-label">Public</label>
									<select class="form-control" name="public_{{ station.id }}">
										<option value="1">Oui</option>
										<option value="0">Non</option>
									</select>
								</div>

								<!-- Adresse (ligne d'adresse avec autocomplete) -->
								<div class="col-md-6 mb-3">
									<label class="form-label">Adresse</label>
									<div class="position-relative">
										<input type="text" class="form-control address-autocomplete" id="addressLine_{{ station.id }}" name="addressLine_{{ station.id }}" placeholder="Commencez à taper une adresse..." autocomplete="off" required/>
										<div class="autocomplete-results list-group position-absolute w-100 shadow-sm" id="autocomplete_results_{{ station.id }}" style="z-index: 1000; display: none;"></div>
									</div>
								</div>

								<!-- Code postal -->
								<div class="col-md-4 mb-3">
									<label class="form-label">Code postal</label>
									<input type="text" class="form-control" name="postalCode_{{ station.id }}" id="postalCode_{{ station.id }}"/>
								</div>

								<!-- Ville -->
								<div class="col-md-4 mb-3">
									<label class="form-label">Ville</label>
									<input type="text" class="form-control" name="city_{{ station.id }}" id="city_{{ station.id }}"/>
								</div>

								<!-- Pays -->
								<div class="col-md-4 mb-3">
									<label class="form-label">Pays</label>
									<input type="text" class="form-control" name="country_{{ station.id }}" id="country_{{ station.id }}" value="France"/>
								</div>
							</div>
						{% endfor %}

						{% if chargingStations|length > 1 %}
							<div class="mb-3 text-center">
								<button type="button" class="btn btn-secondary" onclick="applyStationInfoToAll()">
									Affecter les informations à toutes les bornes
								</button>
							</div>
						{% endif %}

						<div class="step-navigation d-flex justify-content-between">
							<button type="button" class="btn-prev btn btn-secondary" onclick="prevStep()">
								<i class="bi bi-arrow-left"></i>
								Précédent
							</button>
							<button type="submit" class="btn-submit btn btn-success">
								Valider
								<i class="bi bi-check"></i>
							</button>
						</div>
					</div>
					{{ form_end(form) }}
				</div>
			</div>
		{% endblock %}
		 <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
	 <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js"></script>
		 <script>
						    function applyPriceToAll() {
						        try {
						          const sourcePurchaseInput = document.querySelector('input[name^="priceKwh_"]');
						          const sourceResaleInput = document.querySelector('input[name^="priceResale_"]');
						          const sourcePublicInput = document.querySelector('input[name^="pricePublic_"]');
						
						          if (!sourcePurchaseInput || !sourceResaleInput || !sourcePublicInput) {
						            alert("Impossible de trouver les champs de prix pour la première borne.");
						            return;
						          }
						
						          const sourcePurchase = sourcePurchaseInput.value;
						          const sourceResale = sourceResaleInput.value;
						          const sourcePublic = sourcePublicInput.value;
						
						          if (sourcePurchase === "" || sourceResale === "" || sourcePublic === "") {
						            alert("Veuillez remplir tous les prix (achat, revente et public) pour la première borne.");
						            return;
						          }
						
						          document.querySelectorAll('input[name^="priceKwh_"]').forEach((input) => {
						            input.value = sourcePurchase;
						          });
						          document.querySelectorAll('input[name^="priceResale_"]').forEach((input) => {
						            input.value = sourceResale;
						          });
						          document.querySelectorAll('input[name^="pricePublic_"]').forEach((input) => {
						            input.value = sourcePublic;
						          });
						        } catch (error) {
						          console.error("Erreur lors de l'application des prix à toutes les bornes :", error);
						          alert("Une erreur est survenue lors de l'application des prix. Veuillez réessayer.");
						        }
						      }
						 
						    function applyStationInfoToAll() {
						      try {
						        const firstPublic = document.querySelector('select[name^="public_"]');
						        const firstAddress = document.querySelector('input[name^="adress_"]');
						        const firstInstalled = document.querySelector('input[name^="installedAt_"]');
						        const firstSupervised = document.querySelector('input[name^="supervisedAt_"]');
						 
						        if (!firstPublic || !firstAddress || !firstInstalled || !firstSupervised) {
						          alert("Impossible de trouver les informations de la première borne.");
						          return;
						        }
						        const valuePublic = firstPublic.value;
						        const valueAddress = firstAddress.value;
						        const valueInstalled = firstInstalled.value;
						        const valueSupervised = firstSupervised.value;
						 
						        if (valueAddress === "" || valueInstalled === "" || valueSupervised === "") {
						          alert("Veuillez remplir toutes les informations de la première borne.");
						          return;
						        }
						        document.querySelectorAll('select[name^="public_"]').forEach((select, index) => {
						          if (index > 0) {
						            select.value = valuePublic;
						          }
						        });
						        document.querySelectorAll('input[name^="adress_"]').forEach((input, index) => {
						          if (index > 0) {
						            input.value = valueAddress;
						          }
						        });
						        document.querySelectorAll('input[name^="installedAt_"]').forEach((input, index) => {
						          if (index > 0) {
						            input.value = valueInstalled;
						          }
						        });
						        document.querySelectorAll('input[name^="supervisedAt_"]').forEach((input, index) => {
						          if (index > 0) {
						            input.value = valueSupervised;
						          }
						        });
						      } catch (error) {
						        console.error("Erreur lors de l'application des informations à toutes les bornes :", error);
						        alert("Une erreur est survenue lors de l'application des informations. Veuillez réessayer.");
						      }
						    }
						 
						    document.addEventListener("DOMContentLoaded", function () {
						      const totalSteps = 4;
						      let currentStep = 1;
						 
						      function showStep(step) {
						        document.querySelectorAll(".step").forEach((stepDiv) => stepDiv.classList.remove("active"));
						        document.getElementById(`step-${step}`).classList.add("active");
						        updateProgressBar(step);
						      }
						 
						      function nextStep() {
						        if (!validateStep(currentStep)) {
						          console.log(`❌ Erreurs détectées à l'étape ${currentStep}.`);
						          return;
						        }
						        if (currentStep < totalSteps) {
						          currentStep++;
						          showStep(currentStep);
						        }
						      }
						 
						      function prevStep() {
						        if (currentStep > 1) {
						          currentStep--;
						          showStep(currentStep);
						        }
						      }
						 
						      window.nextStep = nextStep;
						      window.prevStep = prevStep;
						 
						      function validateStep(step) {
						        let isValid = true;
						        const fields = document.querySelectorAll(`#step-${step} input, #step-${step} select`);
						        fields.forEach((field) => {
						          field.classList.remove("is-invalid");
						          let errorMessage = validateField(field);
						          if (errorMessage) {
						            isValid = false;
						            showError(field, errorMessage);
						          }
						        });
						        console.log(`Validation de l'étape ${step}: ${isValid}`);
						        return isValid;
						      }
						 
						      function validateField(field) {
						        const value = field.value.trim();
						        if (!value) {
						          return "Ce champ est obligatoire";
						        }
						        return null;
						      }
						 
						      function showError(field, message) {
						        field.classList.add("is-invalid");
						        let parent = field.closest(".mb-3") || field.parentNode;
						        let errorDiv = parent.querySelector(".error-message");
						        if (!errorDiv) {
						          errorDiv = document.createElement("div");
						          errorDiv.className = "error-message text-danger mt-1";
						          errorDiv.innerText = message;
						          parent.appendChild(errorDiv);
						        } else {
						          errorDiv.innerText = message;
						        }
						      }
						 
						      function updateProgressBar(step) {
						        const progress = (step / totalSteps) * 100;
						        const progressBar = document.getElementById("progress-bar");
						        if (progressBar) {
						          progressBar.style.width = `${progress}%`;
						          progressBar.setAttribute("aria-valuenow", progress);
						        }
						      }
						 
						      document.querySelectorAll(".btn-next").forEach((button) => {
						        button.addEventListener("click", function (event) {
						          event.preventDefault();
						          nextStep();
						        });
						      });
						 
						      document.querySelectorAll(".btn-prev").forEach((button) => {
						        button.addEventListener("click", function (event) {
						          event.preventDefault();
						          prevStep();
						        });
						      });
						 
						      showStep(currentStep);
						    });
						  </script>
	</body>

</html>

 <script>
document.addEventListener('DOMContentLoaded', function () {
  const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
  tooltipTriggerList.forEach(function (tooltipTriggerEl) {
    new bootstrap.Tooltip(tooltipTriggerEl)
  })
})
</script>
{# 
  <script>
  const input = document.getElementById('client_contract_form_address_fullAddress');

  input.addEventListener('input', function () {
    const query = this.value;
    if (query.length < 3) return;

    fetch(`https://api-adresse.data.gouv.fr/search/?q=${encodeURIComponent(query)}&limit=5`)
      .then(res => res.json())
      .then(data => {
        const datalist = document.getElementById('address-suggestions');
        if (!datalist) return;

        datalist.innerHTML = '';
        data.features.forEach(feature => {
          const option = document.createElement('option');
          option.value = feature.properties.label;
          option.dataset.raw = JSON.stringify(feature.properties);
          datalist.appendChild(option);
        });
      });
  });

  input.addEventListener('change', function () {
    const selectedValue = this.value;
    const options = document.getElementById('address-suggestions')?.options || [];

    for (let opt of options) {
      if (opt.value === selectedValue) {
        const props = JSON.parse(opt.dataset.raw);

        document.getElementById('client_contract_form_address_streetNumber')?.value = props.housenumber || '';
        document.getElementById('client_contract_form_address_streetName')?.value = props.street || '';
        document.getElementById('client_contract_form_address_postalCode')?.value = props.postcode || '';
        document.getElementById('client_contract_form_address_city')?.value = props.city || '';
        document.getElementById('client_contract_form_address_country')?.value = 'France';
        break;
      }
    }
  });
</script>
#}

 <script>
  const input = document.getElementById('client_contract_form_address_fullAddress');
  const results = document.getElementById('autocomplete-results');

  input.addEventListener('input', function () {
    const query = this.value;
    if (query.length < 3) {
      results.style.display = 'none';
      return;
    }

    fetch(`https://api-adresse.data.gouv.fr/search/?q=${encodeURIComponent(query)}&limit=5`)
      .then(res => res.json())
      .then(data => {
        results.innerHTML = '';
        if (data.features.length === 0) {
          results.style.display = 'none';
          return;
        }

        data.features.forEach(feature => {
          const item = document.createElement('button');
          item.type = 'button';
          item.className = 'list-group-item list-group-item-action';
          item.textContent = feature.properties.label;
          item.dataset.raw = JSON.stringify(feature.properties);

          item.addEventListener('click', function () {
            const props = JSON.parse(this.dataset.raw);

            input.value = props.label;
            document.getElementById('client_contract_form_address_streetNumber').value = props.housenumber || '';
            document.getElementById('client_contract_form_address_streetName').value = props.street || '';
            document.getElementById('client_contract_form_address_postalCode').value = props.postcode || '';
            document.getElementById('client_contract_form_address_city').value = props.city || '';
            document.getElementById('client_contract_form_address_country').value = 'France';

			 // 🔽 Ajout latitude / longitude
			const coords = data.features.find(f => f.properties.label === raw.label)?.geometry?.coordinates;
			if (coords) {
				document.getElementById('latitude')?.value = coords[1]; // latitude
				document.getElementById('longitude')?.value = coords[0]; // longitude
			}

			// 🔽 Ajout département et région depuis "context"
			const context = raw.context?.split(',').map(c => c.trim());
			const department = context?.[1] || '';
			const region = context?.[2] || '';
			document.getElementById('department')?.value = department;
			document.getElementById('region')?.value = region;

            results.style.display = 'none';
          });

          results.appendChild(item);
        });

        results.style.display = 'block';
      });
  });

  document.addEventListener('click', function (e) {
    if (!results.contains(e.target) && e.target !== input) {
      results.style.display = 'none';
    }
  });
  // À exécuter une fois dans ton JS global
  document.querySelectorAll('[data-bs-toggle="tooltip"]').forEach(el => {
    new bootstrap.Tooltip(el);
  });
</script>

 <script>
  document.addEventListener('DOMContentLoaded', function () {
    document.querySelectorAll('.address-autocomplete').forEach(input => {
      const stationId = input.id.split('_')[1];
      const results = document.getElementById(`autocomplete_results_${stationId}`);

      input.addEventListener('input', function () {
        const query = this.value;
        if (query.length < 3) {
          results.style.display = 'none';
          return;
        }

        fetch(`https://api-adresse.data.gouv.fr/search/?q=${encodeURIComponent(query)}&limit=5`)
          .then(res => res.json())
          .then(data => {
            results.innerHTML = '';
            if (data.features.length === 0) {
              results.style.display = 'none';
              return;
            }

            data.features.forEach(feature => {
              const props = feature.properties;
              const item = document.createElement('button');
              item.type = 'button';
              item.className = 'list-group-item list-group-item-action';
              item.textContent = props.label;
              item.dataset.raw = JSON.stringify(props);

              item.addEventListener('click', function () {
                const raw = JSON.parse(this.dataset.raw);
                input.value = raw.label;

                document.getElementById(`postalCode_${stationId}`).value = raw.postcode || '';
                document.getElementById(`city_${stationId}`).value = raw.city || '';
                document.getElementById(`country_${stationId}`).value = 'France';

                results.style.display = 'none';
              });

              results.appendChild(item);
            });

            results.style.display = 'block';
          });
      });

      document.addEventListener('click', function (e) {
        if (!results.contains(e.target) && e.target !== input) {
          results.style.display = 'none';
        }
      });
    });
  });
</script>
